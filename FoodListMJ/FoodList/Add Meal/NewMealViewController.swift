//
//  NewMealViewController.swift
//  FoodListMJ
//
//  Created by Oleg Stepanov on 24.12.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewMealDisplayLogic: AnyObject {
    func displaySomething(viewModel: NewMeal.AddMeal.ViewModel)
    //    func displaySomethingElse(viewModel: NewMeal.SomethingElse.ViewModel)
}

class NewMealViewController: UIViewController, NewMealDisplayLogic {
    var interactor: NewMealBusinessLogic?
    var router: (NSObjectProtocol & NewMealRoutingLogic & NewMealDataPassing)?
    
    var navBar = UINavigationBar()
    var fieldView = FieldsView()
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Setup Clean Code Design Pattern
    
    private func setup() {
        let viewController = self
        let interactor = NewMealInteractor()
        let presenter = NewMealPresenter()
        let router = NewMealRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }
    
    // MARK: - request data from NewMealInteractor
    
    func createNewMeal(newMeal: MealSend) {
        let request = NewMeal.AddMeal.Request(newMeal: newMeal)
        interactor?.createNewMeal(request: request)
    }
    
    @objc func addNewMeal() {
        guard let newMeal = fieldView.getData() else { return }
        createNewMeal(newMeal: newMeal)
    }
    
    // MARK: - display view model from NewMealPresenter
    
    func displaySomething(viewModel: NewMeal.AddMeal.ViewModel) {
        fieldView.clearFields()
    }
    
    @objc private func closeScene() {
        dismiss(animated: true, completion: nil)
    }
}

extension NewMealViewController {

    
    private func setupView() {
        navBar = UINavigationBar(frame: CGRect(x: 0, y: 0, width: view.frame.size.width, height: 44))
        let navItem = UINavigationItem(title: "Назад")
        let doneItem = UIBarButtonItem(barButtonSystemItem: .close, target: nil, action: #selector(closeScene))
        let addItem = UIBarButtonItem(barButtonSystemItem: .add, target: nil, action: #selector(addNewMeal))
        navItem.leftBarButtonItem = doneItem
        navItem.rightBarButtonItem = addItem
        navBar.setItems([navItem], animated: false)

        
        setupConstraints()
    }
    
    private func setupConstraints() {
        view.addSubview(navBar)
        view.addSubview(fieldView)
        fieldView.translatesAutoresizingMaskIntoConstraints = false
        fieldView.topAnchor.constraint(equalTo: navBar.bottomAnchor, constant: 8).isActive = true
        fieldView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 0).isActive = true
        fieldView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: 0).isActive = true
        fieldView.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: 0).isActive = true
        
        fieldView.clearFields()
    }
}
